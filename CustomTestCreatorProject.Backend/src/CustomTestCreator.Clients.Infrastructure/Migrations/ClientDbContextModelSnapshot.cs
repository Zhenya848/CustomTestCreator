// <auto-generated />
using System;
using System.Collections.Generic;
using CustomTestCreator.Clients.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CustomTestCreator.Clients.Infrastructure.Migrations
{
    [DbContext(typeof(ClientDbContext))]
    partial class ClientDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomTestCreator.Clients.Domain.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.ComplexProperty<Dictionary<string, object>>("TaskSettings", "CustomTestCreator.Clients.Domain.Client.TaskSettings#TaskSettings", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("IsInfiniteMode")
                                .HasColumnType("boolean")
                                .HasColumnName("is_infinite_mode");

                            b1.Property<bool>("IsRandomTasks")
                                .HasColumnType("boolean")
                                .HasColumnName("is_random_tasks");
                        });

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("CustomTestCreator.Clients.Domain.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("discriminator");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("RightAnswer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("right_answer");

                    b.Property<string>("TaskMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("task_message");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("task_name");

                    b.Property<Guid?>("test_id")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("test_id")
                        .HasDatabaseName("ix_tasks_test_id");

                    b.ToTable("tasks", (string)null);

                    b.HasDiscriminator().HasValue("Task");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CustomTestCreator.Clients.Domain.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<bool>("IsTimeLimited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_time_limited");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_name");

                    b.Property<string>("VerdictsList")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("verdicts");

                    b.Property<Guid?>("client_id")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.ComplexProperty<Dictionary<string, object>>("LimitTime", "CustomTestCreator.Clients.Domain.Test.LimitTime#LimitTime", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Hours")
                                .HasColumnType("integer")
                                .HasColumnName("limit_time_hours");

                            b1.Property<int>("Minutes")
                                .HasColumnType("integer")
                                .HasColumnName("limit_time_minutes");

                            b1.Property<int>("Seconds")
                                .HasColumnType("integer")
                                .HasColumnName("limit_time_seconds");
                        });

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.HasIndex("client_id")
                        .HasDatabaseName("ix_tests_client_id");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("CustomTestCreator.Clients.Domain.TaskOfChoosingAnswer", b =>
                {
                    b.HasBaseType("CustomTestCreator.Clients.Domain.Task");

                    b.Property<string>("AnswersList")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.ToTable("tasks", (string)null);

                    b.HasDiscriminator().HasValue("TaskOfChoosingAnswer");
                });

            modelBuilder.Entity("CustomTestCreator.Clients.Domain.Task", b =>
                {
                    b.HasOne("CustomTestCreator.Clients.Domain.Test", null)
                        .WithMany("Tasks")
                        .HasForeignKey("test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tasks_tests_test_id");
                });

            modelBuilder.Entity("CustomTestCreator.Clients.Domain.Test", b =>
                {
                    b.HasOne("CustomTestCreator.Clients.Domain.Client", null)
                        .WithMany("Tests")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tests_clients_client_id");
                });

            modelBuilder.Entity("CustomTestCreator.Clients.Domain.Client", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("CustomTestCreator.Clients.Domain.Test", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
